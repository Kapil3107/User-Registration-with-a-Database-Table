[{"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/index.js":"1","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/App.js":"2","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/reportWebVitals.js":"3","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/Submit.js":"4","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/store.js":"5","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/Users.js":"6","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/components/AppForm.js":"7","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/actions/infoActions.js":"8","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/reducers/index.js":"9","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/actions/types.js":"10","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/actions/errorActions.js":"11","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/reducers/infoReducer.js":"12","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/reducers/errorReducer.js":"13","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/components/AppNavbar_1.js":"14","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/components/AppNavbar_2.js":"15"},{"size":1198,"mtime":1611425349583,"results":"16","hashOfConfig":"17"},{"size":376,"mtime":1611474675420,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1610213426007,"results":"19","hashOfConfig":"17"},{"size":1078,"mtime":1611475476530,"results":"20","hashOfConfig":"17"},{"size":394,"mtime":1610275775245,"results":"21","hashOfConfig":"17"},{"size":10073,"mtime":1611593438522,"results":"22","hashOfConfig":"17"},{"size":13269,"mtime":1611486000287,"results":"23","hashOfConfig":"17"},{"size":974,"mtime":1611384714546,"results":"24","hashOfConfig":"17"},{"size":209,"mtime":1611379669003,"results":"25","hashOfConfig":"17"},{"size":219,"mtime":1611379532932,"results":"26","hashOfConfig":"17"},{"size":315,"mtime":1610980651728,"results":"27","hashOfConfig":"17"},{"size":779,"mtime":1611385314531,"results":"28","hashOfConfig":"17"},{"size":596,"mtime":1610980653720,"results":"29","hashOfConfig":"17"},{"size":1161,"mtime":1611478014674,"results":"30","hashOfConfig":"17"},{"size":1156,"mtime":1611475384134,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"12jqna5",{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"35"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"35"},"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/index.js",["70"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport Users from './Users';\nimport Submit from './Submit';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n// Font awesome\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faCheckSquare, faSort, faAngleDoubleLeft, faAngleDoubleRight } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(fab, faCheckSquare, faSort, faAngleDoubleLeft, faAngleDoubleRight);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/users\" component={Users} />\n        <Route path=\"/submit\" component={Submit} />\n      </div>\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["71","72"],"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/App.js",["73"],"import './App.css';\nimport { Container } from 'reactstrap';\nimport AppForm from './components/AppForm';\nimport AppNavbar_1 from './components/AppNavbar_1';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppNavbar_1 />\n      <Container>\n        <AppForm />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/reportWebVitals.js",[],"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/Submit.js",[],"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/store.js",[],"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/Users.js",["74","75","76","77","78","79","80","81","82"],"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/components/AppForm.js",["83","84"],"import React from 'react';\nimport { Form, FormGroup, Label, Input, FormFeedback, FormText, Button, Alert } from 'reactstrap';\n\nimport { connect } from 'react-redux';\nimport { addInfo } from '../actions/infoActions';\nimport PropTypes from 'prop-types';\n\nimport { withRouter } from 'react-router-dom';\n\nclass AppForm extends React.Component {\n    state = {\n        name: '',\n        email: '',\n        phoneNo: null,\n        dateOfBirth: '',\n        gender: '',\n        education: '',\n        checkBox: false,\n        nameError: '',\n        emailError: '',\n        phoneNoError: '',\n        dateOfBirthError: '',\n        genderError: '',\n        educationError: '',\n        msg: ''\n    };\n\n    static propTypes = {\n        addInfo: PropTypes.func.isRequired,\n        info: PropTypes.object.isRequired,\n        error: PropTypes.object.isRequired\n    }\n\n    onClick = () => {\n        this.setState({\n            checkBox: !this.state.checkBox\n        })\n    }\n\n    setEducation = (e) => {\n        this.setState({\n            education: e.target.value\n        });\n        this.setState({ educationError: \"\" });\n    }\n\n    setGender = (e) => {\n        this.setState({\n            gender: e.target.value\n        });\n\n    }\n\n    removeErrorGender = () => {\n        this.setState({ genderError: \"\" });\n    }\n\n    removeErrorDOB = () => {\n        this.setState({ dateOfBirthError: \"\" });\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n        this.setState({ nameError: \"\", emailError: \"\", phoneNoError: \"\", dateOfBirthError: \"\", genderError: \"\", educationError: \"\" });\n    }\n\n    nameValidation = () => {\n        const { name } = this.state;\n\n        let nameError = \"\";\n\n        if (name.trim() === '') {\n            nameError = \"Name is required\";\n            this.setState({ nameError });\n            return false;\n        }\n\n        if (/[^a-zA-Z -]/.test(name)) {\n            nameError = \"Invalid Characters\";\n            this.setState({ nameError });\n            return false;\n        }\n\n        if (name.trim().length < 3) {\n            nameError = \"Name must contain at least three characters\";\n            this.setState({ nameError });\n            return false;\n        }\n\n        return true;\n\n    }\n\n    emailValidation = () => {\n        const { email } = this.state;\n\n        let emailError = \"\";\n\n        if (/^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email)) {\n            return true;\n        }\n\n        if (email.trim() === '') {\n            emailError = \"Email is required\";\n            this.setState({ emailError });\n            return false;\n        }\n\n        emailError = \"Please enter a valid email\";\n        this.setState({ emailError });\n        return false;\n    }\n\n    phoneValidation = () => {\n        const { phoneNo } = this.state;\n\n        let phoneNoError = \"\";\n\n        if (phoneNo === null) {\n            phoneNoError = \"This field is required\";\n            this.setState({ phoneNoError });\n            return false;\n        }\n\n        if (phoneNo != null && !(/^[0]?[789]\\d{9}$/.test(phoneNo.toString()))) {\n            phoneNoError = \"Please enter a valid phone number\";\n            this.setState({ phoneNoError });\n            return false;\n        }\n\n        return true;\n    }\n\n    dobValidation = () => {\n        const { dateOfBirth } = this.state;\n\n        let dateOfBirthError = \"\";\n\n        if (dateOfBirth === '') {\n            dateOfBirthError = \"This field is required\";\n            this.setState({ dateOfBirthError });\n            return false;\n        }\n\n        return true;\n    }\n\n    genderValidation = () => {\n        const { gender } = this.state;\n\n        let genderError = \"\";\n\n        if (gender === '') {\n            genderError = \"This field is required\";\n            this.setState({ genderError });\n            return false;\n        }\n\n        return true;\n    }\n\n    educationValidation = () => {\n        const { education } = this.state;\n\n        let educationError = \"\";\n\n        if (education === '') {\n            educationError = \"This field is required\";\n            this.setState({ educationError });\n            return false;\n        }\n\n        return true;\n    }\n\n    validate = () => {\n\n        const nameVal = this.nameValidation();\n        const emailVal = this.emailValidation();\n        const phoneVal = this.phoneValidation();\n        const dobVal = this.dobValidation();\n        const genderVal = this.genderValidation();\n        const educVal = this.educationValidation();\n\n        if (nameVal && emailVal && phoneVal && dobVal && genderVal && educVal) {\n            return true;\n        }\n\n        return false;\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        // validate\n        const isValid = this.validate();\n\n        // sending the info\n        if (isValid) {\n            const { name, email, phoneNo, dateOfBirth, gender, education, checkBox } = this.state;\n\n            const newInfo = {\n                name,\n                email,\n                phoneNo,\n                dateOfBirth,\n                gender,\n                education,\n                checkBox\n            }\n\n            this.props.addInfo(newInfo);\n        }\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const { error } = this.props;\n\n        if (this.props.info.msg === 'Success') {\n            this.props.history.push('/submit');\n        }\n\n        if (error !== prevProps.error) {\n            this.setState({ msg: error.msg.msg });\n        }\n    }\n\n    render() {\n        return (\n            <Form action='/submit' method='post' enctype='multipart/form-data' onSubmit={this.handleSubmit}>\n                {this.state.msg ? (<h4 style={{ color: 'red', textAlign: 'center' }}>{this.state.msg}</h4>) : null}\n                <FormGroup class=\"form-input-material\" style={{ marginTop: '30px' }}>\n                    <Label for=\"name\">Name <span style={{ color: 'red' }}>*</span></Label>\n                    {\n                        (this.state.nameError)\n                            ?\n                            <div>\n                                <Input invalid type=\"text\" name=\"name\" id=\"name\" placeholder=\"Enter full name\" onChange={this.onChange} />\n                                <FormFeedback>{this.state.nameError}</FormFeedback>\n                            </div>\n                            :\n                            <div>\n                                <Input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Enter full name\" onChange={this.onChange} />\n                            </div>\n                    }\n                </FormGroup>\n\n                <FormGroup>\n                    <Label for=\"email\">Email <span style={{ color: 'red' }}>*</span></Label>\n                    {\n                        (this.state.emailError)\n                            ?\n                            <div>\n                                <Input invalid type=\"text\" name=\"email\" id=\"email\" placeholder=\"Enter your email\" onChange={this.onChange} />\n                                <FormFeedback>{this.state.emailError}</FormFeedback>\n                            </div>\n                            :\n                            <div>\n                                <Input type=\"text\" name=\"email\" id=\"email\" placeholder=\"Enter your email\" onChange={this.onChange} />\n                            </div>\n                    }\n                </FormGroup>\n\n\n                <FormGroup>\n                    <Label for=\"phoneNumber\">Phone Number <span style={{ color: 'red' }}>*</span></Label>\n                    {\n                        (this.state.phoneNoError)\n                            ?\n                            <div>\n                                <Input invalid type=\"phoneNo\" name=\"phoneNo\" id=\"phoneNo\" placeholder=\"Enter your phone number\" onChange={this.onChange} />\n                                <FormFeedback>{this.state.phoneNoError}</FormFeedback>\n                            </div>\n                            :\n                            <div>\n                                <Input type=\"phoneNo\" name=\"phoneNo\" id=\"phoneNo\" placeholder=\"Enter your phone number\" onChange={this.onChange} />\n                            </div>\n                    }\n                </FormGroup>\n\n                <FormGroup onMouseOver={this.removeErrorDOB}>\n                    <Label for=\"date of birth\">Date of Birth <span style={{ color: 'red' }}>*</span></Label>\n                    {\n                        (this.state.dateOfBirthError)\n                            ?\n                            <div>\n                                <Input\n                                    invalid\n                                    type=\"date\"\n                                    name=\"dateOfBirth\"\n                                    id=\"dateOfBirth\"\n                                    placeholder=\"date placeholder\"\n                                    onChange={this.onChange}\n                                />\n                                <FormFeedback>{this.state.dateOfBirthError}</FormFeedback>\n                            </div>\n                            :\n                            <Input\n                                type=\"date\"\n                                name=\"dateOfBirth\"\n                                id=\"dateOfBirth\"\n                                placeholder=\"date placeholder\"\n                                onChange={this.onChange}\n                            />\n                    }\n                </FormGroup>\n\n                <FormGroup onMouseOver={this.removeErrorGender} value={this.state.value}>\n                    <Label for=\"gender\">Gender <span style={{ color: 'red' }}>*</span></Label>\n                    {\n                        (this.state.genderError)\n                            ?\n                            <div>\n                                <Input invalid type=\"select\" name=\"gender\" id=\"gender\" onChange={this.setGender}>\n                                    <option value=\"Select\">Please Select</option>\n                                    <option value=\"Male\">Male</option>\n                                    <option value=\"Female\">Female</option>\n                                    <option value=\"Other\">Other</option>\n                                </Input>\n                                <FormFeedback>{this.state.genderError}</FormFeedback>\n                                <div></div>\n                            </div>\n                            :\n                            <Input type=\"select\" name=\"gender\" id=\"gender\" onChange={this.setGender}>\n                                <option value=\"Select\">Please Select</option>\n                                <option value=\"Male\">Male</option>\n                                <option value=\"Female\">Female</option>\n                                <option value=\"Other\">Other</option>\n                            </Input>\n                    }\n                </FormGroup>\n\n                <FormGroup tag=\"fieldset\" onChange={this.setEducation}>\n                    <Label for=\"education\">Education <span style={{ color: 'red' }}>*</span></Label>\n                    <FormGroup check>\n                        <Label check>\n                            <Input type=\"radio\" name=\"education\" value=\"Class 10\" />{' '}\n                            Class 10<sup>th</sup>\n                        </Label>\n                    </FormGroup>\n                    <FormGroup check>\n                        <Label check>\n                            <Input type=\"radio\" name=\"education\" value=\"Class 12\" />{' '}\n                            Class 12<sup>th</sup>\n                        </Label>\n                    </FormGroup>\n                    <FormGroup check>\n                        <Label check>\n                            <Input type=\"radio\" name=\"education\" value=\"Graduate\" />{' '}\n                            Graduate\n                        </Label>\n                    </FormGroup>\n                    <FormGroup check>\n                        <Label check>\n                            <Input invalid type=\"radio\" name=\"education\" value=\"Post-Graduate\" />{' '}\n                            Post-Graduate\n                        </Label>\n                    </FormGroup>\n                    <div style={{ marginTop: '2px', color: 'red', fontSize: '13px' }}>{this.state.educationError}</div>\n                </FormGroup>\n\n                <FormGroup check>\n                    <Label check>\n                        <Input type=\"checkbox\" onClick={this.onClick} /> I agree to all the terms and conditions <span style={{ color: 'red' }}>*</span>\n                    </Label>\n                </FormGroup>\n                <br />\n                {\n                    (this.state.checkBox)\n                        ?\n                        <Button style={{ marginBottom: '70px' }}>Submit</Button>\n                        :\n                        <Button disabled style={{ marginBottom: '70px', cursor: 'not-allowed', pointerEvents: 'all !important' }}>Submit</Button>\n                }\n            </Form>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    info: state.info,\n    error: state.error\n});\n\nexport default connect(mapStateToProps, { addInfo })(withRouter(AppForm));","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/actions/infoActions.js",[],"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/reducers/index.js",[],"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/actions/types.js",[],"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/actions/errorActions.js",[],"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/reducers/infoReducer.js",[],"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/reducers/errorReducer.js",["85"],"import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';\n\nconst initialState = {\n    msg: {},\n    status: null,\n    id: null\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return {\n                msg: action.payload.msg,\n                status: action.payload.status,\n                id: action.payload.id\n            };\n        case CLEAR_ERRORS:\n            return {\n                msg: {},\n                status: null,\n                id: null\n            };\n        default:\n            return state;\n    }\n}",["86","87"],"/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/components/AppNavbar_1.js",["88"],"import React, { Component, Fragment } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Container\n} from 'reactstrap';\n\nclass AppNavbar_1 extends Component {\n    state = {\n        isOpen: false\n    }\n\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n                    <Container>\n                        <NavbarBrand href=\"#\">Register</NavbarBrand>\n                        <NavbarToggler onClick={this.toggle} />\n                        <Collapse isOpen={this.state.isOpen} navbar>\n                            <Nav className=\"ml-auto\" navbar>\n                                <NavItem>\n                                    <NavLink href=\"/users\">Registered Users</NavLink>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </Container>\n                </Navbar>\n            </div>\n        )\n    }\n}\n\nexport default AppNavbar_1;","/Users/lucky/Desktop/PROJECTS/User Registration with a Database Table/client/src/components/AppNavbar_2.js",["89"],"import React, { Component, Fragment } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Container\n} from 'reactstrap';\n\nclass AppNavbar_2 extends Component {\n    state = {\n        isOpen: false\n    }\n\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n                    <Container>\n                        <NavbarBrand href=\"#\">Registered Users</NavbarBrand>\n                        <NavbarToggler onClick={this.toggle} />\n                        <Collapse isOpen={this.state.isOpen} navbar>\n                            <Nav className=\"ml-auto\" navbar>\n                                <NavItem>\n                                    <NavLink href=\"/\">Register</NavLink>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </Container>\n                </Navbar>\n            </div>\n        )\n    }\n}\n\nexport default AppNavbar_2;",{"ruleId":"90","severity":1,"message":"91","line":3,"column":17,"nodeType":"92","messageId":"93","endLine":3,"endColumn":21},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":10,"column":7,"nodeType":"100","endLine":10,"endColumn":22},{"ruleId":"90","severity":1,"message":"101","line":74,"column":9,"nodeType":"92","messageId":"93","endLine":74,"endColumn":13},{"ruleId":"102","severity":1,"message":"103","line":149,"column":25,"nodeType":"100","endLine":149,"endColumn":77},{"ruleId":"102","severity":1,"message":"103","line":152,"column":25,"nodeType":"100","endLine":152,"endColumn":77},{"ruleId":"102","severity":1,"message":"103","line":155,"column":25,"nodeType":"100","endLine":155,"endColumn":77},{"ruleId":"102","severity":1,"message":"103","line":158,"column":25,"nodeType":"100","endLine":158,"endColumn":77},{"ruleId":"102","severity":1,"message":"103","line":161,"column":25,"nodeType":"100","endLine":161,"endColumn":77},{"ruleId":"102","severity":1,"message":"103","line":169,"column":25,"nodeType":"100","endLine":169,"endColumn":50},{"ruleId":"104","severity":1,"message":"105","line":209,"column":8,"nodeType":"106","endLine":209,"endColumn":10,"suggestions":"107"},{"ruleId":"98","severity":1,"message":"108","line":275,"column":17,"nodeType":"100","endLine":275,"endColumn":32},{"ruleId":"90","severity":1,"message":"109","line":2,"column":55,"nodeType":"92","messageId":"93","endLine":2,"endColumn":63},{"ruleId":"90","severity":1,"message":"110","line":2,"column":73,"nodeType":"92","messageId":"93","endLine":2,"endColumn":78},{"ruleId":"111","severity":1,"message":"112","line":9,"column":1,"nodeType":"113","endLine":26,"endColumn":2},{"ruleId":"94","replacedBy":"114"},{"ruleId":"96","replacedBy":"115"},{"ruleId":"90","severity":1,"message":"116","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"116","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["117"],"no-negated-in-lhs",["118"],"react/jsx-pascal-case","Imported JSX component AppNavbar_1 must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'rows' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["119"],"Imported JSX component AppNavbar_2 must be in PascalCase or SCREAMING_SNAKE_CASE","'FormText' is defined but never used.","'Alert' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration",["117"],["118"],"'Fragment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},"Update the dependencies array to be: [props]",{"range":"122","text":"123"},[7515,7517],"[props]"]